//////////////////////// A1, PART A - README \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

* Running "make" will make all of the necessary binaries

* Note: The only bug that I know my code has is that if you run ncat and connect to the server/proxy, but then quit before sending a message, the server/proxy will segfault. I ran out of time to fix this issue, but it is probably a minor fix.

-----------
TCP Server
-----------
- The TCP server is started by running ./tcpServer with a port number (from 30000 - 40000).
- The four commands (add, getvalue, getall, remove) are used by sending the request as a single string that is parsed by the server:
    (i) add <key> <value> 
        Returns "Pair added (key: <key>, value: <value>)" on success
    (ii) getvalue <key>
         Returns "Key Found: Key <key> has value <value>" on success
    (iii) getall
          Returns "Key: <key_0>, Value: <value_0>
                   Key: <key_1>, Value: <value_1>
                   ..." on success
    (iv) remove <key>
         Returns "Pair with key <key> successfully removed" on success
         
- Each command needs to be run as a separate connection since the server does not support persistent connections.

----------
TCP Proxy
----------
- The TCP proxy is started by running ./tcpProxy <proxy_port_num> <server_hostname> <server_port_num> with a port number (from 30000 - 40000) as well as the tcpServer's host name and port number. The tcpProxy will remain running until it is killed, just like tcpServer.
- Requests can now be sent with ncat using the tcpProxy hostname and port number, in the same way that they were sent directly to tcpServer as described above.
- When tcpProxy receives a request from ncat, it creates a connection with tcpServer and then sends the request byte stream to the server. It then takes the reply from tcpServer and forwards it back to the client (ncat). So from ncat's point of view, connecting to the proxy has the same behaviour as connecting directly to the server.

-------------------
UDP Proxy & Server
-------------------
- The UDP proxy and server are run in the exact same way as the TCP solutions (except for the different names, udpServer and udpProxy). Again, udpServer takes in a port number as a parameter and udpProxy takes in a port number and the server's hostname and port number.
- The ncat commands work in the same way as before.

----------------------------------------------------------
Ex Use Case (for TCP Server/Proxy, works the same for UDP)
----------------------------------------------------------

WINDOW 1:
./tcpServer 35000

WINDOW 2:
./tcpProxy 35001 `hostname` 35000

WINDOW 3:
ncat `hostname` 35001
*Then any single command*
ncat `hostname` 35001
*Another command*
...