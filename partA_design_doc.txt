//////////////////////// A2, PartA - Design Doc \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Steven Rau
scr108
11115094

///////////////////////////////////////////////////////////////////////////
// Global implementation details
//////////////////////////////////////////////////////////////////////////

- I chose not to use threads, so the user's input is not read in while the client is attempting to get a reply from the server. However, once the client gets a reply that it is happy with, any input entered in the meantime will now be processed in the order that it was entered (or at least this was the intention and expected behaviour).

- The timeout is implemented as a part of the select call in my client's get_reply_from_receiver() function. The select call watches the server's file descriptor to see if it is ready for reading (to get the reply). If it does not become ready in the duration specified by the command line argument, the action times out. Any input entered by the user during this time is handled as mentioned above.

- Ack corruption probabilities are expected to be provided as a float from 0 - 1.0, with 0 meaning that all acks will be sent and 1.0 meaning that no acks will be sent.

///////////////////////////////////////////////////////////////////////////
// Q1
//////////////////////////////////////////////////////////////////////////

UDP sender (client)
-----------------------------
I began with my UDP proxy since it alread contained the UDP client side that I need for this assignment. Quite a bit of unneeded code was removed (code that interacted with the client), before starting this question.

My messages are wrapped in a struct called message (in shared.h) that has a field for a sequence number header. The field for the user input text was set to be 256 characters, so any message longer than that will be cut off.

The sliding window is implemented as a buffer to hold n messages, where n is the window size specified by the user as a command line argument. New messages are added onto the end of the buffer as the window "slides forward".

The UDP client code behaves quite similarily to assignment 1 as long as the sliding window buffer isn't full. The messages are sent to a handler that forwards them to the receiver and then listens for a reply. If no reply is heard or the select() call times out before an ack is received from the receiver/server, the message is added to the window buffer.

Once the window buffer reaches its max size, the client ignores user text input from stdin (for the time being) and instead attempts to send the message from the window that is the next in-order message based on the most recent sequence number ack that was received from the server.

At any point when an ack containing a sequence number is received from the server, the sliding window is checked to see if it can be moved forward (any message with a sequence number lower than the one received in the ack can be removed since it must have been correctly received by the server)


UDP receiver (server)
-----------------------------
I used my UDP server from assignment 1 as a starting point. Very few things had to be removed and mostly all changes made were additions to support the extra functionality needed.

My server handles a message received from the client in one of three ways:

(1) If the message is the next in-order message, a reply is sent with the sequence number received and the a varible holding the last successful in-order sequence number is updated.
(2) If the message has the same sequence number as the current most recent in-order sequence number successfully received, that same sequence number is sent back as a reply because the client obviously does not know that the message was already received.
(3) If the message is out of order, do nothing. Just loop back to receive another message.

Whenever an ack is to be sent, the probablility entered as a command line argument (from 0 to 1.0) determines if it should be successful. The helper function ackLost() returns a boolean determining if the ack should be sent or not.


///////////////////////////////////////////////////////////////////////////
// Q2
//////////////////////////////////////////////////////////////////////////

UDP sender (client)
-----------------------------
The sender/client for this question did not have to change at all. All of the changes necessary to implement the selective repeat sliding window are in the receiver code. 


UDP receiver (server)
-----------------------------
Again, like Q1, the server handles three messages in three different ways:
(1) If the message is the next in-order message, a reply is sent with the current most recent in-order sequence number received. However, since we can now have buffered messages that were received out of order, we need to see if any items can now be cleared from the buffer. For example, if items 3, 4, 5, and 7 are in the buffer and we receive the next in-order sequence number of 2, we can clear 3, 4, and 5 from the buffer since they are the next in-order messages that we have already received. Now instead of just returning the sequence number of the in-order message received, we reply with an ack containing the sequence number of the largest message cleared from the buffer (in this case, 5).
(2) If the message has the same sequence number as the current most recent in-order sequence number successfully received, that same sequence number is sent back as a reply because the client obviously does not know that the message was already received.
(3) If the message is out of order, first attempt to add it to the buffer as long as there is space left. If we have already received that message sequence number, it is ignored and not added to the buffer. After the item is buffered, if no message has been successfully received yet, no ack is sent, otherwise an ack is sent containing the most recent successfully received in-order sequence number.

Again, the acks will fail at a probability equal to the value passed in as a command line argument.

The buffer is implemented as an array of struct message that is dynamically allocated to hold n messages, where n is the buffer size as indicated by the command line parameter.

