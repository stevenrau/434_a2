//////////////////////// A1, Part1 - Design Doc \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

*Note: All steps of this question use the files storage.c and storage.h for the key/value pair storage and retrival, as well as the header file server.h which contains some minor defines.

Q1 - TCP Server (tcpServer.c)
-------------------------------------------
- For this question, I modeled my TCP server around the one described in Beej's guide (http://beej.us/guide/bgnet/output/html/multipage/clientserver.html), with some modifications where I saw fit.
- I added a header file, tcpServer.h to hold all of my non-private constants.
- Since I chose to use IPv6 addresses instead of IPv4 (which Beej's code uses), I had to make some changes to structs used. For example, struct sockaddr_in6 was used instead of sockaddr_in, and the associated fields had to be changed to work as well.
- For the storage/retrieval of key value pairs, I created a simple struct called key_val_pair with two fields, key and val. The main storage data structure is an array that holds a max of 256 key_val_pair structs. I chose to put all of the key_val_pair operations and command aprsing in separate files, storage.c and storage.h, since all the same methods will have to be used by the UDP implementation as well.
- The command parsing in storage.c's parse_and_run_command() function is done mostly using strtok() since all of the commands but "getall" use a space as a delimeter between the operation and the parameters (or \n for a single word command). Once the command is parsed, the appropriate handler parses any parameters and then calls a helper function to actually complete the operation.
- Any searching of the dictionary array is done linearily because: (1) It was quick and easy to implement. (2) I don't do any sorting (3) The max size is 256, so the array is guarunteed to remain relatively small.
- All four operations were tested using ncat and should be working correctly

Q2 - TCP Proxy (tcpProxy.c)
---------------------------
- Since the proxy needs to encapsulate the behaviour of both a TCP server and client, I first copied the majority of the server code from tcpServer.c.
- Now, when the proxy receives a accept() connection (from ncat), it calls a helper function, handle(), that sets up a connection with the server (using the hostname and port num that were provided as command line arguments at startup) and coordinates the transfer of data from the client to the server and then the reply from the server to the client.
- For the client code, I based my solution loosely around http://www.martinbroadhurst.com/source/tcpproxy.c.html and http://beej.us/guide/bgnet/output/html/multipage/clientserver.html.
- Again, the connections between proxy and client & proxy and server are non-persistent, so ncat needs to be restarted for each command request and a new connection is established between the proxy and server with each new client request.

Q3 - UDP Proxy & Server (udpProxy.c, udpServer.c)
-------------------------------------------------
- The UDP proxy/server solution on this question was modeled heavily around the previoud TCP proxy/server solutions, except it uses sendto() and recvfrom() for message passing instead of read() and write().
- The UDP server simply waits to receive a packet, and once it does, it sends the request to the command parser in storage.c for processing. Then the server returns the reply message constructed by storage.c's parse_and_run_command() back to the original sender.
- In this question, the UDP proxy is always the original sender. The proxy accepts TCP requests from ncat and forwards them as UDP requests to the UDP server. It then takes the UDP reply from the server and forwards it back to the TCP client (ncat) as a TCP message. These two send/receive patterns are implemented in udpProxy.c's transfer_tcp_to_udp() and transfer_udp_to_tcp().